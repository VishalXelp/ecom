{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport { productData } from './dataJson/productData';\nimport { ADD_TO_CART, REMOVE_ITEM, SUB_QUANTITY, ADD_QUANTITY, ADD_SHIPPING, ADD_QUANTITY_WITH_NUMBER, RESET_CART, ADD_TO_COMPARE, REMOVE_ITEM_FROM_COMPARE } from '../actions/action-types/cart-actions';\n\nconst initState = _objectSpread({}, productData);\n\nconst cartReducer = (state = initState, action) => {\n  if (action.type === ADD_TO_CART) {\n    let addedItem = state.products.find(item => item.id === action.id); //check if the action id exists in the addedItems\n\n    let existed_item = state.addedItems.find(item => action.id === item.id);\n\n    if (existed_item) {\n      addedItem.quantity += 1;\n      console.log(addedItem);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        total: state.total + addedItem.price\n      });\n    } else {\n      addedItem.quantity = 1; //calculating the total\n\n      let newTotal = state.total + addedItem.price;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addedItems: [...state.addedItems, addedItem],\n        total: newTotal\n      });\n    }\n  } // if(action.type === ADD_TO_COMPARE){\n  //     let addedItemToCompare = state.products.find(item => item.id === action.id)\n  //     addedItemToCompare.quantity = 1;\n  //     return {\n  //         ...state,\n  //         addedItemsToCompare: [...state.addedItemsToCompare, addedItemToCompare]\n  //     }\n  // }\n  // if(action.type === ADD_QUANTITY_WITH_NUMBER){\n  //     let addedItem = state.products.find(item => item.id === action.id)\n  //     //check if the action id exists in the addedItems\n  //     let existed_item = state.addedItems.find(item=> action.id === item.id)\n  //     if(existed_item)\n  //     {\n  //         addedItem.quantity += action.qty\n  //         return {\n  //             ...state,\n  //             total: state.total + addedItem.price * action.qty\n  //         }\n  //     } else {\n  //         addedItem.quantity = action.qty;\n  //         //calculating the total\n  //         let newTotal = state.total + addedItem.price * action.qty\n  //         return {\n  //             ...state,\n  //             addedItems: [...state.addedItems, addedItem],\n  //             total : newTotal\n  //         }\n  //     }\n  // }\n\n\n  if (action.type === REMOVE_ITEM) {\n    let itemToRemove = state.addedItems.find(item => action.id === item.id);\n    let new_items = state.addedItems.filter(item => action.id !== item.id); //calculating the total\n\n    let newTotal = state.total - itemToRemove.price * itemToRemove.quantity;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      addedItems: new_items,\n      total: newTotal\n    });\n  } // if(action.type === REMOVE_ITEM_FROM_COMPARE){\n  //     let new_items = state.addedItemsToCompare.filter(item=> action.id !== item.id)\n  //     return {\n  //         ...state,\n  //         addedItemsToCompare: new_items\n  //     }\n  // }\n  // if(action.type === ADD_QUANTITY){\n  //     let addedItem = state.products.find(item=> item.id === action.id)\n  //     addedItem.quantity += 1\n  //     let newTotal = state.total + addedItem.price\n  //     return {\n  //         ...state,\n  //         total: newTotal\n  //     }\n  // }\n  // if(action.type === SUB_QUANTITY){  \n  //     let addedItem = state.products.find(item=> item.id === action.id) \n  //     //if the qt == 0 then it should be removed\n  //     if(addedItem.quantity === 1){\n  //         let new_items = state.addedItems.filter(item=>item.id !== action.id)\n  //         let newTotal = state.total - addedItem.price\n  //         return {\n  //             ...state,\n  //             addedItems: new_items,\n  //             total: newTotal\n  //         }\n  //     } else {\n  //         addedItem.quantity -= 1\n  //         let newTotal = state.total - addedItem.price\n  //         return {\n  //             ...state,\n  //             total: newTotal\n  //         }\n  //     }\n  // }\n  // if(action.type === ADD_SHIPPING){\n  //     return {\n  //         ...state,\n  //         shipping: state.shipping += 6\n  //     }\n  // }\n  // if(action.type === 'SUB_SHIPPING'){\n  //     return {\n  //         ...state,\n  //         shipping: state.shipping -= 6\n  //     }\n  // }\n\n\n  if (action.type === RESET_CART) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      addedItems: [],\n      total: 0,\n      shipping: 0\n    });\n  } else {\n    return state;\n  }\n};\n\nexport const initStore = (initialState = initState) => {\n  return createStore(cartReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n};","map":null,"metadata":{},"sourceType":"module"}